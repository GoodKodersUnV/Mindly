generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id       String  @id @default(uuid())
  name     String
  username String  @unique
  email    String  @unique
  image    String?
  password String?

  role Role @default(USER)

  lastLogin     DateTime[]
  emailVerified DateTime?

  oneTimePassword String @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account Account[]
  profile Profile?

  Quiz  Quiz[]
  score score[]

  hearts   Int @default(10)
  diamonds Int @default(100)
  supercoins Int @default(3)
}

model Profile {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  bio String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id       String   @id @default(uuid())
  category String
  modules  Module[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User?       @relation(fields: [createdByID], references: [id])
  createdByID String?
  Submodule   Submodule[]
}

model Module {
  id    String @id @default(uuid())
  title String

  submodules Submodule[]

  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Submodule {
  id    String @id @default(uuid())
  level Int

  questions Json

  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String

  module   Module @relation(fields: [moduleId], references: [id])
  moduleId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  score score[]

  @@unique([quizId, level])
}

model score {
  id    String @id @default(uuid())
  score Int

  submodule   Submodule @relation(fields: [submoduleId], references: [id])
  submoduleId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([submoduleId, userId])
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?
  access_token      String?
  id_token          String?
  scope             String?
  session_state     String?
  expires_at        Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@unique([provider, providerAccountId])
}
